#!/bin/bash
## Logging functions
INFO(){ echo -e '\033[0;32m'"INFO:\033[0m $*"; }
WARN(){ echo -e '\033[0;33m'"WARN:\033[0m $*"; }
ERRO(){ echo -e '\033[0;31m'"ERRO:\033[0m $*"; exit 1; }

## Define useful functions
rm_w(){ [ -f "$1" ] && rm "$1"; }

export TMP="$(mktemp -u)"
export PREFIXCOMMAND=""
export WINEARCH=win32
export BASE_DIR="$HOME/.local/share/osu-wine"
export WINEPREFIX="$BASE_DIR/WINE.$WINEARCH/"
export OSU_INSTALL_PATH="$BASE_DIR/OSU/"
export WINE_REQ_MOD=( dotnet45 )
export WINE="wine"
export marcRPC="false"
export install_wine_osu="false"

# Sourcing after defining the config 
CONF=( '/etc/osu-wine.conf' "$HOME/.osu-wine.conf" )
for each in "${CONF[@]}"; do
	source "$each" &> /dev/null || WARN "Missing: ${CONF}!";
done

## Check some deps, the right way
bin_exist(){
	for bin in $@; do 
		which "$1" &> /dev/null || ERRO "Missing ${1}!"; 
	done
}
bin_exist wine winetricks wineserver winepath wineboot wget

INFO "Check: Base dir $BASE_DIR"
mkdir -p "$BASE_DIR"					

INFO "Check: wineprefix exist $WINEPREFIX"
if [ ! -d "$WINEPREFIX" ]; then
	INFO "Wine prefix not exist"
	INFO "So try recreate it"
	wineboot &> /dev/null || ERRO "Failed to initialize wine(boot)!"
	INFO "Created: $WINEPREFIX"
fi
INFO "Last tested version: wine-2.16"
INFO "Your version: $(wine --version)"

INFO "Check: wineprefix configured"
cd "$WINEPREFIX" || exit 1
if [ ! -f "winetricks.log" ]; then
	winetricks -q --optout "${WINE_REQ_MOD[@]}" || ERRO "Something went wrong at Winetricks!"
fi

INFO "Check: wine can access only to wine drive C:/ + X:/ (osu)"
for link in "$WINEPREFIX/dosdevices"/*; do
	[[ "$link" =~ c: ]] && continue # For default link to ../drive_c
	[[ "$link" =~ x: ]] && continue # For link to osu path
	rm -v "$link"
done

INFO "Check: osu dir"
mkdir -p "$OSU_INSTALL_PATH"

INFO "Check: Link X: -> $OSU_INSTALL_PATH"
ln -Tfs "$OSU_INSTALL_PATH" "$WINEPREFIX/dosdevices/x:"

cd "$OSU_INSTALL_PATH" || exit 1

if [ ! -f "osu!.exe" ]; then
	INFO "Can't find osu exe, reinstall"
	wget "http://m1.ppy.sh/r/osu!install.exe" -O "osu!.exe"
fi

if [[ "${marcRPC}" = true ]]; then 
	DEST="$BASE_DIR/rpc-dll/"
	if [[ ! -e "$DEST/bin32" || ! -e "$DEST/bin64" ]]; then
		mkdir -p "$DEST"
		bin_exist wget tar
		[ -z $ver ] && ver="1.0.0"
		wget -O "/tmp/rpc-wine.tar.gz" "https://github.com/Marc3842h/rpc-wine/releases/download/${ver}/rpc-wine.tar.gz" || ERRO "Failed to fetch marc-rpc"
		tar -xvzf "/tmp/rpc-wine.tar.gz" -C "$DEST" &> /dev/null || ERRO "tar failed to extract."
	fi

	export WINEDLLPATH="$DEST/bin32:$DEST/bin64:$WINEDLLPATH"
fi

#if [[ "$install_wine_osu" = true ]]; then
#	[ -z $wine_osu_ver ] && wine_osu_ver="3.13-1-x86_64"
#
#	DEST="$BASE_DIR/wine-osu"
#	if [[ ! -e "$DEST" ]]; then
#		wget "https://archrepo.thepoon.fr/wine-osu-${wine_osu_ver}.pkg.tar.xz" -O "/tmp/wine-osu-${wine_osu_ver}.pkg.tar.xz" || ERRO "Failed to fetch wine-osu"
#		mkdir -p /tmp/wine-osu
#		tar -xvf "/tmp/wine-osu-${wine_osu_ver}.pkg.tar.xz" -C /tmp/wine-osu || ERRO "tar failed to extract."
#		mv -f /tmp/wine-osu/opt/wine-osu "$DEST" && INFO "Poon's Wine installed into $DEST" 
#	fi
#fi

INFO "Initialization Finished"

case $1 in 
	*'.osz'|*'.osz2'|*'.osr'|*'.osk')
		mv -f "$1" ./
		for file in ./*.osz ./*.osz2 ./*.osr ./*.osk; do
			[ ! -f "$file" ] && continue
			$PREFIXCOMMAND $WINE "X:/osu!.exe" "$file"
		done
		exit 0
		;;
	'osu://'*)
		$PREFIXCOMMAND $WINE "X:/osu!.exe" "$1"
		;;
	'--winetricks')
		$PREFIXCOMMAND winetricks ${@:2} || ERRO "Winetricks errored out."
		exit 0
		;;
	'--winecfg')
		$PREFIXCOMMAND $WINE winecfg || ERRO "Winecfg errored out."
		exit 0
		;;
	'--remove')
		{ pkill -f '.exe' && INFO 'Killed all processes ending with .exe'; } || WARN "Not killing all processes ending with .exe"
		{ pkill -f 'wineserver' && INFO 'Killed wineserver'; } || WARN "Not killing wineserver"
		rm -rf "$WINEPREFIX" && INFO "Removed Wineprefix"
		read -p "$(WARN 'Do you want to delete osu? All data will be lost. (y/N) ')" CHOICE
		[[ $CHOICE = 'y' || $CHOICE = 'Y' ]] && rm -rf "$OSU_INSTALL_PATH" && INFO "Removed osu"
		exit 0
		;;
	'--kill')
		{ pkill -f '.exe' && INFO 'Killed all processes ending with .exe'; } || WARN "Not killing all processes ending with .exe"
		{ pkill -f 'wineserver' && INFO 'Killed wineserver'; } || WARN "Not killing wineserver"
		exit 0
		;;
	'--help'|'-h')
		sub()  { echo $'\t'"$@"; }
		sub2() { echo $'\t\t'"$@"$'\n'; }
		echo "_Usages"
		sub "osu-wine"
			sub2 "- Automatic installation of the game and run it"
		sub "osu-wine --winetricks [winetricks packages]"
			sub2 "- Runs Winetricks on the osu!Linux Wineprefix"
		sub "osu-wine --winecfg"
			sub2 "- Runs winecfg on the osu!Linux Wineprefix"
		sub "osu-wine --kill"
			sub2 "- Kills all Wine and Windows processes (dangerous)"
		sub "osu-wine --remove"
			sub2 "- Uninstalls the Wineprefix and optionally the game too (dangerous)"
		exit 0
		;;
	*)
		$PREFIXCOMMAND $WINE "X:/osu!.exe" | tee /tmp/osu-wine.log
		;;
esac
